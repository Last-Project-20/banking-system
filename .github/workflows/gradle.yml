name: Team 20 Banking System CI/CD with AWS EC2, ECR

on:
  push:
    branches:
      - validateToPersonal

env:
  ECR_NAMESPACE: sparta

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    # 3개의 서비스를 모두 빌드할 수 있도록 변수로 지정합니다.
    # https://docs.github.com/ko/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
    strategy:
      matrix:
        service: [ com.banking.eureka.server,
                   com.banking.config,
                   com.banking.auth,
                   com.banking.gateway,
                   com.banking.commonBean,
                   com.banking.product,
                   com.banking.account,
                   com.banking.personal,
                   com.banking.notification,
                   com.banking.performance]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean :${{ matrix.service }}:bootJar -x test

  Docker:
    name: Build docker image and Push to registry
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # AWS ECR 에 이미지 업로드 권한을 얻기 위해 인증을 진행합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      # .env 파일 생성
      - name: Create .env file
        run: |
          echo "SLACK_API_TOKEN=${{ secrets.SLACK_API_TOKEN }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}" >> .env
          echo "ENCRYPTOR_PASSWORD=${{ secrets.ENCRYPTOR_PASSWORD }}" >> .env
        # 필요한 다른 환경 변수도 추가

      # dockerTagAndPush.sh에 실행 권한 부여
      - name: Grant execute permission for dockerTagAndPush.sh
        run: chmod +x ./dockerTagAndPush.sh

      # docker compose 를 이용해서 여러 이미지를 모두 빌드하고, 별도의 script를 사용해서 이미지를 push 합니다.
      - name: Build, Tag and Push docker image to AWS ECR
        run: |
          docker compose build
          ./dockerTagAndPush.sh
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}