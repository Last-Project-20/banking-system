name: Team 20 Banking System CI/CD with AWS EC2, ECR

on:
  push:
    branches:
      - validateToPersonal

env:
  ECR_NAMESPACE: sparta
  ECR_REGISTRY: 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    # 3개의 서비스를 모두 빌드할 수 있도록 변수로 지정합니다.
    # https://docs.github.com/ko/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
    strategy:
      matrix:
        service: [ com.banking.eureka.server,
                   com.banking.config,
                   com.banking.auth,
                   com.banking.gateway,
                   com.banking.commonBean,
                   com.banking.product,
                   com.banking.account,
                   com.banking.personal,
                   com.banking.notification,
                   com.banking.performance]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean :${{ matrix.service }}:bootJar -x test

  Docker:
    name: Build docker image and Push to registry
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # AWS ECR 에 이미지 업로드 권한을 얻기 위해 인증을 진행합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      # .env 파일 생성
      - name: Create .env file
        run: |
          echo "SLACK_API_TOKEN=${{ secrets.SLACK_API_TOKEN }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}" >> .env
          echo "ENCRYPTOR_PASSWORD=${{ secrets.ENCRYPTOR_PASSWORD }}" >> .env
        # 필요한 다른 환경 변수도 추가

      - name: Build and Push docker images to AWS ECR
        run: |
          services=("config" "eureka.server" "gateway" "auth" "personal" "product" "account" "notification" "performance")
          commit_hash=$(git rev-parse --short HEAD)
          
          echo "ECR_REGISTRY is set to: $ECR_REGISTRY"
          echo "ECR_NAMESPACE is set to: $ECR_NAMESPACE"

          for service in "${services[@]}"; do
            imageName="${{ env.ECR_REGISTRY }}/${{ env.ECR_NAMESPACE }}/${service}"
            # Docker Compose를 사용하여 이미지를 빌드합니다.
            docker build -t "$imageName:latest" --build-arg MODULE="$service" .

            # 태그 추가
            docker tag "$imageName:latest" "$imageName:$commit_hash"

            # AWS ECR에 푸시
            docker push "$imageName:latest"
            docker push "$imageName:$commit_hash"

            echo "$service image is built and pushed to AWS ECR"
          done

          echo "Build and Push processing is done"