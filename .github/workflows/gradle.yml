name: Team 20 Banking System CI/CD with AWS EC2, ECR

on:
  push:
    branches:
      - cicd

env:
  ECR_NAMESPACE: sparta
  ECR_REGISTRY: 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    # 3개의 서비스를 모두 빌드할 수 있도록 변수로 지정합니다.
    # https://docs.github.com/ko/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
    strategy:
      matrix:
        service: [ com.banking.eureka.server,
                   com.banking.config,
                   com.banking.auth,
                   com.banking.gateway,
                   com.banking.commonBean,
                   com.banking.product,
                   com.banking.account,
                   com.banking.personal,
                   com.banking.notification,
                   com.banking.performance]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean :${{ matrix.service }}:bootJar -x test

  Docker:
    name: Build docker image and Push to registry
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # AWS ECR 에 이미지 업로드 권한을 얻기 위해 인증을 진행합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # .env 파일 생성
      - name: Create .env file
        run: |
          echo "SLACK_API_TOKEN=${{ secrets.SLACK_API_TOKEN }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}" >> .env
          echo "ENCRYPTOR_PASSWORD=${{ secrets.ENCRYPTOR_PASSWORD }}" >> .env
        # 필요한 다른 환경 변수도 추가

      # ECR에서 기존 이미지 삭제
      - name: Remove old image from ECR
        run: |
          services=("config" "eureka.server" "gateway" "auth" "personal" "product" "account" "notification" "performance")
          for service in "${services[@]}"; do
            aws ecr batch-delete-image --repository-name ${{ env.ECR_NAMESPACE }}/$service --image-ids imageTag=latest || true
          done

      # Docker 이미지 빌드 및 푸시
      - name: Build and Push docker images to AWS ECR
        run: |
          services=("config" "eureka.server" "gateway" "auth" "personal" "product" "account" "notification" "performance")
          commit_hash=$(git rev-parse --short HEAD)
          
          echo "ECR_REGISTRY is set to: $ECR_REGISTRY"
          echo "ECR_NAMESPACE is set to: $ECR_NAMESPACE"
          
          for service in "${services[@]}"; do
            imageName="${{ env.ECR_REGISTRY }}/${{ env.ECR_NAMESPACE }}/${service}"
          
            echo "$imageName ---------------------- "
            echo "$service -------------------- "
          
            # Docker 이미지 빌드
            docker build -t "$imageName:latest" -f ./Dockerfile --build-arg MODULE="$service" .
          
            # 태그 추가
            docker tag "$imageName:latest" "$imageName:$commit_hash"
          
            # AWS ECR에 푸시
            docker push "$imageName:latest"
            docker push "$imageName:$commit_hash"
          
            echo "$service image is built and pushed to AWS ECR"
          done

  Deploy:
    name: AWS EC2 Deploy
    needs: Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # AWS ECR에 로그인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # docker compose로 container를 실행하기 위해 docker-compose.yml 을 EC2로 복사합니다.
      - name: Copy Docker compose file to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu" # target 은 디렉토리임. target directory 아래에 같은 이름의 파일로 옮겨진다.

      # ssh를 통해 EC2에 접속하고 docker container를 재시작합니다.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: 22
          envs: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, ECR_REGISTRY, ECR_NAMESPACE
          script: |
            echo "AWS_REGION is set to: ${{ secrets.AWS_REGION }}"
            echo "ECR_REGISTRY is set to: $ECR_REGISTRY"

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 211125657451.dkr.ecr.ap-northeast-2.amazonaws.com
            
            echo "Logging in to ECR complete"

            docker-compose down
            docker-compose pull
            docker-compose up -d

