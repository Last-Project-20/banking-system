version: '3.8'
services:
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: always
    ports:
      - 9411:9411
    networks:
      - banking-network
#    deploy:
#      resources:
#        limits:
#          cpus: "0.1"
#          memory: 128M

  redis-stack:
    image: redis/redis-stack
    container_name: redis-stack-compose
    restart: always
    command: ["redis-server", "--requirepass", "systempass"]
    ports:
      - 6379:6379
      - 8001:8001 # 레디스 인사이트 접속 포트
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "systempass", "PING" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - banking-network
#    deploy:
#      resources:
#        limits:
#          cpus: "0.25"
#          memory: 256M

  postgres:
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: 'banking'
      POSTGRES_PASSWORD: 'banking20'
      TZ: Asia/Seoul
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U banking -d auth" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - banking-network
#    deploy:
#      resources:
#        limits:
#          cpus: "0.25"
#          memory: 256M

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    platform: linux/amd64
    restart: always
    ports:
      - "3181:3181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 3181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - banking-network
#    deploy:
#      resources:
#        limits:
#          cpus: "0.25"
#          memory: 256M

  kafka:
    image: wurstmeister/kafka:latest
    platform: linux/amd64
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:3181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - banking-network
#    deploy:
#      resources:
#        limits:
#          cpus: "0.25"
#          memory: 512M

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    platform: linux/amd64
    restart: always
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:3181
      KAFKA_CLUSTERS_0_READONLY: "false"
    networks:
      - banking-network
#    deploy:
#      resources:
#        limits:
#          cpus: "0.1"
#          memory: 128
  config:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: native # 원하는 프로파일 설정
        MODULE: config
    environment:
      SPRING_PROFILES_ACTIVE: native
    ports:
      - "19000:19000"
    networks:
      - banking-network

  eureka:
    build:
      dockerfile: ./Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: prod
        MODULE: eureka.server
    environment:
      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
    ports:
      - "19090:19090"
    depends_on:
      - config
    networks:
      - banking-network

  gateway:
    build:
      dockerfile: ./Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: prod
        MODULE: gateway
    environment:
      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
    ports:
      - "19092:19092"
    depends_on:
      - eureka
    networks:
      - banking-network

  auth:
    build:
      dockerfile: ./Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: prod
        MODULE: auth
    environment:
      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
    ports:
      - "19093:19093"
    networks:
      - banking-network

  personal:
    build:
      dockerfile: ./Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: prod
        MODULE: personal
    environment:
      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
    ports:
      - "19096:19096"
    depends_on:
      - gateway
    networks:
      - banking-network

  product:
    build:
      dockerfile: ./Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: prod
        MODULE: product
    environment:
      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
    ports:
      - "19096:19096"
    depends_on:
      - gateway
    networks:
      - banking-network

#  config:
#    build:
#      dockerfile: Dockerfile
#      args:
#        - FILE_DIRECTORY=./com.banking.config
#    ports:
#      - "19000:19000"
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis-stack:
#        condition: service_healthy
#    networks:
#      - banking-network
#
#  eureka:
#    build:
#      dockerfile: Dockerfile
#      args:
#        - FILE_DIRECTORY=./com.banking.eureka.server
#    environment:
#      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
#    ports:
#      - "19090:19090"
#    depends_on:
#      config:
#        condition: service_completed_successfully
#    networks:
#      - banking-network
#
#  gateway:
#    build:
#      dockerfile: Dockerfile
#      args:
#        - FILE_DIRECTORY=./com.banking.gateway
#    environment:
#      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
#    ports:
#      - "19092:19092"
#    depends_on:
#      eureka:
#        condition: service_completed_successfully
#    networks:
#      - banking-network
#
#  auth:
#    build:
#      dockerfile: Dockerfile
#      args:
#        - FILE_DIRECTORY=./com.banking.auth
#    environment:
#      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
#    depends_on:
#      gateway:
#        condition: service_completed_successfully
#    ports:
#      - "19093:19093"
#    networks:
#      - banking-network
#
#  account:
#    build:
#      dockerfile: Dockerfile
#      args:
#        - FILE_DIRECTORY=./com.banking.account
#    environment:
#      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
#    depends_on:
#      - auth
#
#  notification:
#    build:
#      dockerfile: Dockerfile
#      args:
#        - FILE_DIRECTORY=./com.banking.notification
#    environment:
#      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
#    depends_on:
#      - auth
#
#  performance:
#    build:
#      dockerfile: Dockerfile
#      args:
#        - FILE_DIRECTORY=./com.banking.performance
#    environment:
#      SPRING_PROFILES_ACTIVE: prod  # 운영 환경 프로파일 설정
#    depends_on:
#      - gateway
#


volumes:
  postgres_data:
    driver: local


networks:
  banking-network:
    driver: bridge