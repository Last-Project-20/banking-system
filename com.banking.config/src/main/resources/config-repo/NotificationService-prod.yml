# Notification Server dev config

server:
  port: 19097

spring:
  application:
    name: NotificationService  # 애플리케이션 이름을 'gateway-service'로 설정
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: ${spring.application.name}-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: '*'
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
  cloud:
    bus:
      destination: banking-platform.dev.event.config-event.json
      refresh:
        enabled: true
      env:
        enabled: true
  data:
    redis:
      host: redis/redis-stack
      port: 6379
      username: default
      password: systempass
      timeout: 3000

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://postgres:5433/notification
    username: banking
    password: banking20

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_batch_fetch_size: 1000

eureka:
  client:
    service-url:
      defaultZone: http://eureka:19090/eureka/
    health-check:
      enabled: true
#  instance:
#    hostname: localhost
    metadata-map:
      instanceId: ${spring.application.name}:${spring.cloud.client.hostname}
    lease-renewal-interval-in-seconds: 30  # 기본값은 30초, 서비스 상태 갱신 주기
    lease-expiration-duration-in-seconds: 90  # 기본값은 90초, 서비스 갱신이 없을 때 만료 시간
    health-check-url-path: /actuator/health # 헬스 체크를 통한 정상작동 확인

management:
  endpoints:
    web:
      exposure:
        include: "*, busrefresh"
  endpoint:
    health:
      show-details: always
    env:
      show-values: "ALWAYS"
  zipkin:
    tracing:
      endpoint: "http://zipkin:9411/api/v2/spans"
  tracing:
    sampling:
      probability: 1.0
  prometheus:
    metrics:
      export:
        enabled: true
  health:
    redis:
      enabled: false

common:
  bean:
    security:
      auth: true
      class: true

service:
  jwt:
    secret-key: "401b09eab3c013d4ca54922bb802bec8fd5318192b0a75f201d8b3727429080fb337591abd3e44453b954555b7a0812e1081c39b740293f765eae731f5a65ed1"

slack:
  botKey: ${SLACK_API_TOKEN}

resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true       # 서킷 브레이커 상태를 헬스 체크에 포함하여 모니터링 가능하게 설정
        slidingWindowType: COUNT_BASED      # 서킷 브레이커가 동작할 때 호출 수를 기준으로 상태를 판단 (COUNT_BASED)
        slidingWindowSize: 5                # 서킷 브레이커의 슬라이딩 윈도우 크기를 5로 설정하여 최근 5번의 호출을 저장
        minimumNumberOfCalls: 5             # 서킷 브레이커가 동작하기 위해 필요한 최소 호출 수를 5로 설정
        slowCallRateThreshold: 100          # 느린 호출의 비율이 100% 이상일 때 서킷 브레이커가 동작하도록 설정
        slowCallDurationThreshold: 60000    # 느린 호출의 기준 시간 (60초). 60초 이상 걸리는 호출은 느린 호출로 간주
        failureRateThreshold: 50            # 실패율이 50%를 넘으면 서킷 브레이커가 동작
        permittedNumberOfCallsInHalfOpenState: 3  # 서킷 브레이커가 Half-open 상태일 때 허용되는 최대 호출 수 (3회)
        waitDurationInOpenState: 20s        # Open 상태에서 Half-open 상태로 전환되기 전까지의 대기 시간 (20초)